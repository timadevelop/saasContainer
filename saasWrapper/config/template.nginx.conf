worker_processes 4;

error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex on; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';

  server {
    listen 80;
    client_max_body_size 4G;
    resolver 127.0.0.11 valid=30s;

    # set the correct host(s) for your site
    server_name ${WRAPPER_PUBLIC_HOST} www.${WRAPPER_PUBLIC_HOST};

    keepalive_timeout 60;

    #
    # Serve webclient static files
    #
    location ${WEBCLIENT_BASE_HREF} {
      alias /data/webclient_dist/browser;
      # search for static files, if not found proxy to angular ssr
      try_files $uri @proxy_to_ssr;
    }

    #
    # Webpack dev server
    #
    location ${WEBCLIENT_BASE_HREF}/sockjs-node/ {
      include proxy_params;
      # Use upgrade header
      # for angular development server
      # (it uses SockJS)
      include angular_ws_params;
      proxy_pass http://${WEBCLIENT_HOST}:${WEBCLIENT_PORT}/sockjs-node/;
    }

    #
    # Serve angular SSR application
    #
    location @proxy_to_ssr {
      include proxy_params;
      include angular_ws_params;
      proxy_pass http://${WEBCLIENT_HOST}:${WEBCLIENT_PORT};
    }

    #
    # serve static api files
    #
    location /saas_api/static {
      alias /data/server_static;
    }

    location /saas_api/media {
      alias /data/server_media;
    }

    #
    # proxy pass http to gunicorn api server
    #
    location /saas_api {
      include proxy_params;
      include gunicorn_params;
      # Rewrite host so django can return proper urls when
      # someone accesses it using internal network (SSR)
      proxy_set_header X-Forwarded-Host ${API_PUBLIC_HOST}:${API_PUBLIC_PORT};
      proxy_pass http://${API_HOST}:${API_PORT};
    }

    #
    # proxy pass WS/WSS to gunicorn ws server
    # ? TODO: split api_server into ws and http services
    location /saas_ws {
      include proxy_params;
      include gunicorn_params;
      proxy_pass http://${API_HOST}:${API_PORT};
    }
  }
}

